tsplot(soi , main = "Souther Oscillation Index")
tsplot(rec , main = "Recruitment of the fish")
ts.plot(soi , rec , col = 1:2 )
##cant do together, scales differ.
acf(soi)
acf(rec)
ccf(soi, rec)
## note a soi at t-6 is related to rec at time t.
plot(rec)
# no relaitonship with time
plot(rec, lag(soi , -6))
##definitive relationship
soir = data.frame(soi = as.matrix(soi) , rec = as.matrix(rec) , time = time(soi))
plot(soir)
## we note that we have to align the series based on the relationship.
fish = ts.intersect(rec, soi6 = lag(soi , -6))
fit = lm(rec ~ soi6 , data = fish)
summary(fit)
plot(fit)
##bad fit , so we arent capturing much with this model..
acf(residuals(fit))
plot(fit)
lag2.plot(rec , soi , 20 )
lag2.plot(soi , rec , 10 )
head(soir)
soir$soidummy = rep('N' , length(soi))
soir$soidummy[soir$soi > 0]
soir$soidummy[soir$soi > 0] = "Y"
soir$soidummy = as.factor(soir$soidummy)
fish = ts.intersect(rec, soi6 = lag(soi , -6) , dummy = lag(soir$soidummy , -6))
soidummy = rep('N' , length(soi))
soidummy[soir$soi > 0] = "Y"
soidummy = as.factor(soir$soidummy)
fish = ts.intersect(rec, soi6 = lag(soi , -6) , dummy = lag(soidummy , -6))
soidummy = rep(0 , length(soi))
soidummy[soir$soi > 0] = 1
fish = ts.intersect(rec, soi6 = lag(soi , -6) , dummy = lag(soidummy , -6))
dummy = ifelse(soi < 0 , 0 , 1)
fish = ts.intersect(rec, soi6 = lag(soi , -6) , dummy = lag(dummy , -6))
dummy = ifelse(soi < 0 , 0 , 1)
fish = ts.intersect(rec, soi6 = lag(soi , -6) , dum = lag(dummy , -6))
fit2 = lm(rec ~ soi6 + dum, data = fish)
summary(fit2)
fit2 = lm(rec ~ soi6*as.factor(dum) , data = fish)
summary(fit2)
dev.off()
par(mfrow=c(2,2))
plot(fit2)
acf(residuals(fit2))
tsplot(varve)
dev.off()
par(mfrow = c(2,1))
tsplot(varve)
tsplot(log(varve))
tsplot(diff(logvarve))
tsplot(diff(log(varve)))
acf(tsplot(diff(log(varve))))
lvarve = log(varve)
tsplot(diff(lvarve))
acf(diff(lvarve))
tsplot(lvarve)
tsplot(soi , main = "Southern Oscillation Index")
dev.off()
tsplot(soi , main = "Southern Oscillation Index")
weights = c (.5 , rep(1,11) , .5)/12
weights
sum(weights)
soif = filter(soi , sides = 2 , filter = weights)
dev.off()
par(mfrow = c(2,1))
tsplot(soi , main = "Southern Oscillation Index")
tsplot(sois , main = "Southern Oscillation Index - filter")
tsplot(soif , main = "Southern Oscillation Index - filter")
weights1 = rep(1/12 , 12)
soi1 = filter(soi , sides = 2 , filter = weights1)
weights1 = rep(1/12 , 12)
soi1 = filter(soi , sides = 2 , filter = weights1)
ts.plot(soi , soif , soi1)
ts.plot(soi , soif , soi1 , col = 2:4)
ts.plot(soi , soif , soi1 , col = 2:4 + 2)
ts.plot(soi , soif , soi1 , col = 2:4 , lwd = 2, lty = 2:4)
ts.plot(soi , soif , soi1 , col = 2:4)
legend("topright" , legend = "Moving avaerage smoother")
ts.plot(soi , soif , soi1 , col = 2:4)
legend("topright" , legend = "Moving average smoother")
?ksmooth()
tsplot(soi)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 )
tsplot(soi)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 , col = 2)
ts.plot(soi , soif , soi1 , col = 2:4)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 , col = 2)
ts.plot(soi , soif , soi1 , col = 2:4)
dev.off()
ts.plot(soi , soif , soi1 , col = 2:4)
#tsplot(soi)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 , col = 5)
lines(loess(soi f = .0) , lwd = 2 , lty =2 , col = 6)
lines(loess(soi , f = .0) , lwd = 2 , lty =2 , col = 6)
lines(loess(soi , f = 0.5) , lwd = 2 , lty =2 , col = 6)
lines(loess(soi ) , lwd = 2 , lty =2 , col = 6)
loess(soi)
lines(lowess(soi) , lwd = 2 , lty =2 , col = 6)
legend("topright" , legend =c( "Moving average smoother",
"Kernel Smoother",
"Lowess Smoother"),
text.col = 4:6
)
ts.plot(soi , soif , soi1 , col = 2:4 , main = "Smoothing SOI data")
####Add a kernel smoother , apparently much better smoother than MA
#tsplot(soi)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 , col = 5)
lines(lowess(soi) , lwd = 2 , lty =2 , col = 6)
####Add a kernel smoother , apparently much better smoother than MA
#tsplot(soi)
lines(ksmooth(time(soi) , soi , kernel = "normal" , bandwidth = 1) , lwd = 2 , lty =2 , col = 5)
legend("topright" , legend =c( "Moving average smoother",
"Kernel Smoother",
"Lowess Smoother"),
text.col = 4:6
)
?stl
tsplot(hor)
hor
x = window(hor , start = 2002)
plot(decompose(x))
plot(stl(x , s.window = 'per'))
plot(decompose(x))
plot(stl(x , s.window = 15))
x = cumsum(.01 + w)
ts.plot(x)
dev.off()
par(mfrow = c(2,1))
par(mfrow = c(2,1))
set.seed(1234)
w = rnorm(500)
x = cumsum(.01 + w)
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
x = ts(cumsum(.01 + w))
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
x = ts(cumsum(.01 + w) , ol = 'darkgray')
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
x = ts(cumsum(.01 + w) , col = 'darkgray')
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
x = ts(cumsum(.01 + w) , col = 'darkgray')
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
x = ts(cumsum(.01 + w) , col = 'darkgray')
ts.plot(x)
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
set.seed(1234)
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
x = ts(cumsum(rnorm(500,.01,1))) # data
#regx = lm(x~0+time(x), na.action=NULL) # regression
tsplot(x, ylab='Random Walk w Drift', col='darkgray')
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray')
}
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
}
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgergreen")
}
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue")
}
?abline
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="dodgergreen" , lty = 2 , lwd = 2)
}
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
}
## Simulating Random Walk with a Drift , del = .01 , sigma_w = 1 , n = 500
## WE are plotting 4 rw with drift series, wont set the seed.
dev.off()
par(mfrow = c(2,2))
#set.seed(1234)
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Randomw Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("topright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
for (i in 1:4) {
w = ts(rnorm(500))
lt = 0.01 *time(w) + w
x = ts(lt)
ts.plot(x ,  col = 'darkgray' , main = paste( "Linear Trend with Noise, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("topright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
for (i in 1:4) {
w = ts(rnorm(500))
lt = 0.01 *time(w) + w
x = ts(lt)
ts.plot(x ,  col = 'darkgray' , main = paste( "Linear Trend with Noise, " , i))
abline(lm(x ~ time(x)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("topright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
for (i in 1:4) {
w = ts(rnorm(500))
lt = 0.01 *time(w) + w
x = ts(lt)
ts.plot(x ,  col = 'darkgray' , main = paste( "Linear Trend with Noise, " , i))
abline(lm(x ~ time(x)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("bottomright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
##Classical Regression doesnt work
for (i in 1:4) {
w = rnorm(500)
rw = cumsum(.01 + w)
x = ts(rw)
ts.plot(x ,  col = 'darkgray' , main = paste( "Random Walk with Drift, " , i))
abline(lm(rw ~ time(rw)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("topright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
for (i in 1:4) {
w = ts(rnorm(500))
lt = 0.01 *time(w) + w
x = ts(lt)
ts.plot(x ,  col = 'darkgray' , main = paste( "Linear Trend with Noise, " , i))
abline(lm(x ~ time(x)) , col ="dodgerblue" , lty = 2 , lwd = 2)
abline(a = 0 , b = .01 , col ="springgreen" , lty = 2 , lwd = 2)
legend("bottomright" , legend = c("Fitted" , "True Mean") , text.col = c("dodgerblue" ,"springgreen"))
}
library(fpp) # To load the data set a10
install.packages("fpp")
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
library(fpp) # To load the data set a10
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
plot(log(a10), ylab="", xlab="Year", main="Log Antidiabetic drug sales")
length(a10)
k <- 60 # minimum data length for fitting a model
n <- length(a10)
mae1 <- mae2 <- mae3 <- matrix(NA,n-k,12)
mae1
dim(mae)
dim(mae1)
st <- tsp(a10)[1]+(k-2)/12
st
?tsp
(k-2)/12
tsp(a10)[1]
(k-2)
head(a10)
tsp(a10)[1:3]
library(fpp)
library(fpp) # To load the data set a10
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
plot(log(a10), ylab="", xlab="Year", main="Log Antidiabetic drug sales")
library(fpp) # To load the data set a10
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
plot(log(a10), ylab="", xlab="Year", main="Log Antidiabetic drug sales")
k <- 60 # minimum data length for fitting a model
n <- length(a10)
mae1 <- mae2 <- mae3 <- matrix(NA,n-k,12)
st <- tsp(a10)[1]+(k-2)/12
for(i in 1:(n-k))
{
xshort <- window(a10, end=st + i/12)
xnext <- window(a10, start=st + (i+1)/12, end=st + (i+12)/12)
fit1 <- tslm(xshort ~ trend + season, lambda=0)
fcast1 <- forecast(fit1, h=12)
fit2 <- Arima(xshort, order=c(3,0,1), seasonal=list(order=c(0,1,1), period=12),
include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=12)
fit3 <- ets(xshort,model="MMM",damped=TRUE)
fcast3 <- forecast(fit3, h=12)
mae1[i,1:length(xnext)] <- abs(fcast1[['mean']]-xnext)
mae2[i,1:length(xnext)] <- abs(fcast2[['mean']]-xnext)
mae3[i,1:length(xnext)] <- abs(fcast3[['mean']]-xnext)
}
(n-k)
i = 1
xshort <- window(a10, end=st + i/12)
xshort
head(10)
head(a10)
tail(a10)
xnext <- window(a10, start=st + (i+1)/12, end=st + (i+12)/12)
xnext
library(fpp) # To load the data set a10
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
plot(log(a10), ylab="", xlab="Year", main="Log Antidiabetic drug sales")
k <- 60 # minimum data length for fitting a model
n <- length(a10)
mae1 <- mae2 <- mae3 <- matrix(NA,n-k,12)
st <- tsp(a10)[1]+(k-2)/12
i = 1
for(i in 1:(n-k))
{
xshort <- window(a10, end=st + i/12)
xnext <- window(a10, start=st + (i+1)/12, end=st + (i+12)/12)
fit1 <- tslm(xshort ~ trend + season, lambda=0)
fcast1 <- forecast(fit1, h=12)
fit2 <- Arima(xshort, order=c(3,0,1), seasonal=list(order=c(0,1,1), period=12),
include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=12)
fit3 <- ets(xshort,model="MMM",damped=TRUE)
fcast3 <- forecast(fit3, h=12)
mae1[i,1:length(xnext)] <- abs(fcast1[['mean']]-xnext)
mae2[i,1:length(xnext)] <- abs(fcast2[['mean']]-xnext)
mae3[i,1:length(xnext)] <- abs(fcast3[['mean']]-xnext)
}
plot(1:12, colMeans(mae1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="MAE",
ylim=c(0.65,1.05))
lines(1:12, colMeans(mae2,na.rm=TRUE), type="l",col=3)
lines(1:12, colMeans(mae3,na.rm=TRUE), type="l",col=4)
legend("topleft",legend=c("LM","ARIMA","ETS"),col=2:4,lty=1)
##lets read the data again
setwd("F:/OneDrive/Learning/DataScience/Statistics Texas A&M University/626/Project/Well33061005340000/Well01")
well <- read.csv(file = "phase3.xlsx")
well <- read.excel(file = "phase3.xlsx")
well <- read.excel2(file = "phase3.xlsx")
well <- read.csv(file = "phase3.csv")
##lets read the data again
setwd("F:/OneDrive/Learning/DataScience/Statistics Texas A&M University/626/Project/Well33061005340000/Well01")
well <- read.csv(file = "phase3.csv")
require(xlsx)
install.packages("xlsx")
require(xlsx)
read.xlsx("phase3.xlsx", sheetName = "Sheet1")
require(xlsx)
read.xlsx("phase3.xlsx", sheetName = "Sheet1")
library(xlsx)
read.xlsx
xlsxFile <- system.file("readTest.xlsx", package = "openxlsx")
df1 <- read.xlsx(xlsxFile = xlsxFile, sheet = 1, skipEmptyRows = FALSE)
sapply(df1, class)
df2 <- read.xlsx(xlsxFile = xlsxFile, sheet = 3, skipEmptyRows = TRUE)
df2$Date <- convertToDate(df2$Date)
sapply(df2, class)
head(df2)
well = read.csv("phase3.csv")
head(well)
well = read.csv("phaseIII.csv")
head(well)
colnames(well) = c("time" , "r")
ts(well)
head(well)
well
?ts(well)
well_ts = ts(well , frequency = 12 , start = c(2007 , 9))
head(well_ts)
(well_ts)
acf2(well_ts)
library(astsa)
library(fpp2)
library(forecast)
library(mgcv)
library(e1071)
acf2(well_ts)
acf(well_ts)
acf(well$r)
well_ts = ts(well$r , frequency = 12 , start = c(2007 , 9))
acf(well_ts)
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
library(tseries)
install.packages("tseries")
install.packages("tseries")
library(tseries)
library("tseries")
library(astsa)
library(fpp2)
library(forecast)
library(mgcv)
library(e1071)
library("tseries")
